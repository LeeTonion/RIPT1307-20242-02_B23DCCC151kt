import React, { useState, useEffect } from 'react';
import { Button, Card, Typography, Row, Col, List, Space, Modal, Statistic, Tooltip } from 'antd';
import { TrophyOutlined, FireOutlined } from '@ant-design/icons';

const { Text, Title } = Typography;
const { Countdown } = Statistic;

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu
type Choice = 'K√©o' | 'B√∫a' | 'Bao';
type GameResult = 'H√≤a' | 'Ng∆∞·ªùi ch∆°i th·∫Øng' | 'M√°y t√≠nh th·∫Øng';

interface HistoryItem {
	playerChoice: Choice;
	computerChoice: Choice;
	result: GameResult;
}

const OanTuTi: React.FC = () => {
	const [playerChoice, setPlayerChoice] = useState<Choice | null>(null);
	const [computerChoice, setComputerChoice] = useState<Choice | null>(null);
	const [result, setResult] = useState<GameResult | null>(null);
	const [history, setHistory] = useState<HistoryItem[]>([]);
	const [score, setScore] = useState({ player: 0, computer: 0 });
	const [gameStreak, setGameStreak] = useState(0);
	const [modalVisible, setModalVisible] = useState(false);
	const [countdown, setCountdown] = useState(5);

	const choices: Choice[] = ['K√©o', 'B√∫a', 'Bao'];

	// Ch·ªçn ng·∫´u nhi√™n c·ªßa m√°y t√≠nh
	const computerSelect = (): Choice => {
		return choices[Math.floor(Math.random() * 3)];
	};

	// X√°c ƒë·ªãnh ng∆∞·ªùi chi·∫øn th·∫Øng
	const determineWinner = (player: Choice, computer: Choice): GameResult => {
		if (player === computer) return 'H√≤a';
		if (
			(player === 'K√©o' && computer === 'Bao') ||
			(player === 'B√∫a' && computer === 'K√©o') ||
			(player === 'Bao' && computer === 'B√∫a')
		) {
			return 'Ng∆∞·ªùi ch∆°i th·∫Øng';
		}
		return 'M√°y t√≠nh th·∫Øng';
	};

	// Ch·ªçn v√† so s√°nh
	const playGame = (choice: Choice) => {
		const computer = computerSelect();
		const gameResult = determineWinner(choice, computer);

		setPlayerChoice(choice);
		setComputerChoice(computer);
		setResult(gameResult);

		// C·∫≠p nh·∫≠t ƒëi·ªÉm s·ªë
		if (gameResult === 'Ng∆∞·ªùi ch∆°i th·∫Øng') {
			setScore((prev) => ({ ...prev, player: prev.player + 1 }));
			setGameStreak((prev) => prev + 1);
		} else if (gameResult === 'M√°y t√≠nh th·∫Øng') {
			setScore((prev) => ({ ...prev, computer: prev.computer + 1 }));
			setGameStreak(0);
		}

		// L∆∞u l·ªãch s·ª≠
		setHistory((prevHistory) => [
			{
				playerChoice: choice,
				computerChoice: computer,
				result: gameResult,
			},
			...prevHistory.slice(0, 9), // Gi·ªõi h·∫°n l·ªãch s·ª≠ 10 l∆∞·ª£t
		]);

		// Ki·ªÉm tra k·∫øt th√∫c game
		if (score.player >= 5 || score.computer >= 5) {
			setModalVisible(true);
			setCountdown(5);
		}
	};

	// B·∫Øt ƒë·∫ßu l·∫°i tr√≤ ch∆°i
	const resetGame = () => {
		setScore({ player: 0, computer: 0 });
		setHistory([]);
		setModalVisible(false);
		setGameStreak(0);
	};

	// ƒê·∫øm ng∆∞·ª£c v√† t·ª± ƒë·ªông ƒë√≥ng modal
	useEffect(() => {
		let timer: NodeJS.Timeout;
		if (modalVisible && countdown > 0) {
			timer = setTimeout(() => setCountdown((prev) => prev - 1), 1000);
		} else if (countdown === 0) {
			resetGame();
		}
		return () => clearTimeout(timer);
	}, [modalVisible, countdown]);

	// Icon t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn
	const getIcon = (choice: Choice) => {
		switch (choice) {
			case 'K√©o':
				return <span>‚úå</span>;
			case 'B√∫a':
				return <span>üëä</span>;
			case 'Bao':
				return <span>‚úã</span>;
		}
	};

	// M√†u s·∫Øc k·∫øt qu·∫£
	const getResultColor = (gameResult: GameResult) => {
		switch (gameResult) {
			case 'Ng∆∞·ªùi ch∆°i th·∫Øng':
				return 'green';
			case 'M√°y t√≠nh th·∫Øng':
				return 'red';
			default:
				return 'gray';
		}
	};

	return (
		<>
			<Card
				title='Tr√≤ ch∆°i O·∫≥n T√π T√¨'
				extra={
					<Space>
						<Tooltip title='ƒêi·ªÉm s·ªë'>
							<TrophyOutlined /> {score.player} - {score.computer}
						</Tooltip>
						{gameStreak > 2 && (
							<Tooltip title='Chu·ªói chi·∫øn th·∫Øng'>
								<FireOutlined style={{ color: 'orange' }} /> {gameStreak}
							</Tooltip>
						)}
					</Space>
				}
				style={{ maxWidth: 600, margin: '0 auto' }}
			>
				<Space direction='vertical' size='large' style={{ width: '100%' }}>
					{/* C√°c n√∫t ch·ªçn */}
					<Row gutter={16} justify='center'>
						{choices.map((choice) => (
							<Col key={choice} span={8}>
								<Tooltip title={choice}>
									<Button type='primary' icon={getIcon(choice)} size='large' block onClick={() => playGame(choice)}>
										{choice}
									</Button>
								</Tooltip>
							</Col>
						))}
					</Row>

					{/* K·∫øt qu·∫£ tr√≤ ch∆°i */}
					{playerChoice && computerChoice && result && (
						<Card
							title='K·∫øt qu·∫£'
							extra={
								<Text strong style={{ color: getResultColor(result) }}>
									{result}
								</Text>
							}
						>
							<Row gutter={16}>
								<Col span={12} style={{ textAlign: 'center' }}>
									<Text>L·ª±a ch·ªçn c·ªßa b·∫°n</Text>
									<div style={{ fontSize: 48, marginBottom: 8 }}>{getIcon(playerChoice)}</div>
									<Text strong>{playerChoice}</Text>
								</Col>
								<Col span={12} style={{ textAlign: 'center' }}>
									<Text>L·ª±a ch·ªçn c·ªßa m√°y</Text>
									<div style={{ fontSize: 48, marginBottom: 8 }}>{getIcon(computerChoice)}</div>
									<Text strong>{computerChoice}</Text>
								</Col>
							</Row>
						</Card>
					)}

					{/* L·ªãch s·ª≠ tr√≤ ch∆°i */}
					<Card title='L·ªãch s·ª≠'>
						<List
							dataSource={history}
							renderItem={(item, index) => (
								<List.Item key={index}>
									<List.Item.Meta
										title={`L∆∞·ª£t ${index + 1}: B·∫°n ${item.playerChoice} - M√°y ${item.computerChoice}`}
										description={<Text style={{ color: getResultColor(item.result) }}>K·∫øt qu·∫£: {item.result}</Text>}
									/>
								</List.Item>
							)}
						/>
					</Card>
				</Space>
			</Card>

			{/* Modal k·∫øt th√∫c tr√≤ ch∆°i */}
			<Modal title='K·∫øt qu·∫£ tr√≤ ch∆°i' open={modalVisible} footer={null} closable={false}>
				<div style={{ textAlign: 'center' }}>
					<Title level={2}>{score.player >= 5 ? 'B·∫°n chi·∫øn th·∫Øng!' : 'M√°y t√≠nh chi·∫øn th·∫Øng!'}</Title>
					<div style={{ fontSize: 48, marginBottom: 16 }}>{score.player >= 5 ? 'üèÜ' : 'ü§ñ'}</div>
					<Text>
						ƒêi·ªÉm s·ªë cu·ªëi: B·∫°n {score.player} - {score.computer} M√°y
					</Text>
					<div style={{ marginTop: 16 }}>
						<Text>Tr√≤ ch∆°i m·ªõi s·∫Ω b·∫Øt ƒë·∫ßu sau </Text>
						<Countdown
							value={Date.now() + countdown * 1000}
							format='ss'
							valueStyle={{ color: 'red', fontWeight: 'bold' }}
						/>
						<Text> gi√¢y</Text>
					</div>
					<Button type='primary' onClick={resetGame} style={{ marginTop: 16 }}>
						Ch∆°i l·∫°i ngay
					</Button>
				</div>
			</Modal>
		</>
	);
};

export default OanTuTi;
